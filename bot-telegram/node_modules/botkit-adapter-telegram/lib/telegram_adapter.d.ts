/**
 * @module botkit-adapter-telegram
 */
/**
 * Copyright (c) Dynameyes Inc. All rights reserved.
 * Licensed under the MIT License.
 */
import { Activity, BotAdapter, TurnContext, ConversationReference, ResourceResponse } from 'botbuilder';
import { TelegramBotWorker } from './botworker';
import { TelegramAPI } from './telegram_api';
/**
 * Connect [Botkit](https://www.npmjs.com/package/botkit) to Telegram Messenger.
 */
export declare class TelegramAdapter extends BotAdapter {
    /**
     * Name used by Botkit plugin loader
     * @ignore
     */
    name: string;
    /**
     * Object containing one or more Botkit middlewares to bind automatically.
     * @ignore
     */
    middlewares: any;
    /**
     * A customized BotWorker object that exposes additional utility methods.
     * @ignore
     */
    botkit_worker: typeof TelegramBotWorker;
    private options;
    /**
     * Create an adapter to handle incoming messages from Telegram and translate them into a standard format for processing by your bot.
     *
     * To use with Botkit:
     * ```javascript
     * const adapter = new TelegramAdapter({
     *     access_token: process.env.TELEGRAM_TOKEN,
     *     webhook_url_host_name: process.env.TELEGRAM_WEBHOOK_URL_HOST_NAME
     * });
     * const controller = new Botkit({
     *      adapter: adapter,
     *      // other options
     * });
     * ```
     *
     * @param options Configuration options
     */
    constructor(options: TelegramAdapterOptions);
    /**
     * Botkit-only: Initialization function called automatically when used with Botkit.
     * Setups the webhook accordingly
     *
     * @param botkit
     */
    init(botkit: any): Promise<any>;
    /**
     * Get a Telegram API client with the correct credentials based on the page identified in the incoming activity.
     * This is used by many internal functions to get access to the Telegram API, and is exposed as `bot.api` on any BotWorker instances passed into Botkit handler functions.
     *
     * ```javascript
     * let api = adapter.getAPI(activity);
     * let res = api.callAPI('getMe', 'GET');
     * ```
     * @param activity An incoming message activity
     */
    getAPI(activity: Partial<Activity>): Promise<TelegramAPI>;
    /**
     * Converts an Activity object to a Telegram messenger outbound message ready for the API.
     * @see https://core.telegram.org/bots/api#sendmessage
     *
     * @param activity
     */
    private activityToTelegram;
    /**
     * Standard BotBuilder adapter method to send a message from the bot to the messaging API.
     * [BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#sendactivities).
     * @see https://core.telegram.org/bots/api#available-methods
     *
     * @param context A TurnContext representing the current incoming message and environment.
     * @param activities An array of outgoing activities to be sent back to the messaging API.
     */
    sendActivities(context: TurnContext, activities: Partial<Activity>[]): Promise<ResourceResponse[]>;
    /**
     * Telegram adapter does not yet support updateActivity.
     * @ignore
     */
    updateActivity(context: TurnContext, activity: Partial<Activity>): Promise<void>;
    /**
     * Telegram adapter does not yet support updateActivity.
     * @ignore
     */
    deleteActivity(context: TurnContext, reference: Partial<ConversationReference>): Promise<void>;
    /**
     * Standard BotBuilder adapter method for continuing an existing conversation based on a conversation reference.
     * [BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#continueconversation)
     * @param reference A conversation reference to be applied to future messages.
     * @param logic A bot logic function that will perform continuing action in the form `async(context) => { ... }`
     */
    continueConversation(reference: Partial<ConversationReference>, logic: (context: TurnContext) => Promise<void>): Promise<void>;
    /**
     * Accept an incoming webhook request and convert it into a TurnContext which can be processed by the bot's logic.
     * @see https://core.telegram.org/bots/api#getting-updates
     *
     * @param req A request object from Restify or Express
     * @param res A response object from Restify or Express
     * @param logic A bot logic function in the form `async(context) => { ... }`
     */
    processActivity(req: any, res: any, logic: (context: TurnContext) => Promise<void>): Promise<void>;
    /**
     * Handles each individual message inside a webhook payload (webhook may deliver more than one message at a time)
     *
     * @param message
     * @param logic
     */
    private processSingleMessage;
}
/**
 * This interface defines the options that can be passed into the TelegramAdapter constructor function.
 */
export interface TelegramAdapterOptions {
    /**
     * Alternate root url used to construct calls to Telegram's API. Can be changed (for mocking, proxy, etc).
     */
    api_host?: string;
    /**
     * Needed to be able to control the bot
     */
    access_token: string;
    /**
     * Needs to be publicly accessible so telegram can send message responses on it
     */
    webhook_url_host_name: string;
}
