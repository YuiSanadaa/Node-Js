"use strict";
/**
 * @module botkit-adapter-telegram
 */
/**
 * Copyright (c) Dynameyes. All rights reserved.
 * Licensed under the MIT License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const request = require("request");
/**
 * A simple API client for the Telegram API.
 * It can be used to call any API provided by Telegram.
 *
 */
class TelegramAPI {
    /**
     * Create a TelegramAPI client.
     * ```
     * let api = new TelegramAPI(TOKEN);
     * await api.callAPI('getMe','POST', {some_options});
     * ```
     *
     * @see https://core.telegram.org/bots/api
     * FORMAT: https://api.telegram.org/bot<access_token>/<method_name>
     *
     * @param access_token
     * @param api_host
     */
    constructor(access_token, api_host = 'api.telegram.org') {
        if (!access_token) {
            throw new Error('Access token is required!');
        }
        this.access_token = access_token;
        this.api_host = api_host;
    }
    /**
     * Call one of the Telegram APIs
     *
     * @see https://core.telegram.org/bots/api
     * FORMAT: https://api.telegram.org/bot<access_token>/<telegram_method_name>
     *
     * @param telegram_method_name Path to the API endpoint, for example `/getMe`. See: https://core.telegram.org/bots/api#available-methods
     * @param method HTTP method, for example POST, GET, DELETE or PUT.
     * @param payload An object to be sent as parameters to the API call.
     * @param entryPath entry path to used when doing the api call.
     */
    callAPI(telegram_method_name, method = 'POST', payload = {}, entryPath = 'bot') {
        return __awaiter(this, void 0, void 0, function* () {
            let queryString = '?';
            let body = {};
            if (method.toUpperCase() === 'GET') {
                for (const key in payload) {
                    queryString = queryString + `${encodeURIComponent(key)}=${encodeURIComponent(payload[key])}&`;
                }
            }
            else {
                body = payload;
            }
            return new Promise((resolve, reject) => {
                request({
                    method: method.toUpperCase(),
                    json: true,
                    body,
                    encoding: null,
                    uri: `https://${this.api_host}/${entryPath}${this.access_token}/${telegram_method_name}${queryString}`
                }, (err, res, body) => {
                    if (err) {
                        reject(err);
                    }
                    else if (body.error) {
                        reject(body.error.message);
                    }
                    else {
                        resolve(body);
                    }
                });
            });
        });
    }
}
exports.TelegramAPI = TelegramAPI;
//# sourceMappingURL=telegram_api.js.map