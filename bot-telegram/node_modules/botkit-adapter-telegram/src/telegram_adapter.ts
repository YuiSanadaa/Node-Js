/**
 * @module botkit-adapter-telegram
 */
/**
 * Copyright (c) Dynameyes Inc. All rights reserved.
 * Licensed under the MIT License.
 */

import { Activity, ActivityTypes, BotAdapter, TurnContext, ConversationReference, ResourceResponse } from 'botbuilder';
import * as Debug from 'debug';
import { TelegramBotWorker } from './botworker';
import { TelegramAPI } from './telegram_api';
import * as _get from 'lodash/get'
import * as _last from 'lodash/last'
import * as size from 'lodash/size'
const debug = Debug('botkit:telegram');

/**
 * Connect [Botkit](https://www.npmjs.com/package/botkit) to Telegram Messenger.
 */
export class TelegramAdapter extends BotAdapter {
    /**
     * Name used by Botkit plugin loader
     * @ignore
     */
    public name = 'Telegram Adapter';

    /**
     * Object containing one or more Botkit middlewares to bind automatically.
     * @ignore
     */
    public middlewares;

    /**
     * A customized BotWorker object that exposes additional utility methods.
     * @ignore
     */
    public botkit_worker = TelegramBotWorker;

    private options: TelegramAdapterOptions;

    /**
     * Create an adapter to handle incoming messages from Telegram and translate them into a standard format for processing by your bot.
     *
     * To use with Botkit:
     * ```javascript
     * const adapter = new TelegramAdapter({
     *     access_token: process.env.TELEGRAM_TOKEN,
     *     webhook_url_host_name: process.env.TELEGRAM_WEBHOOK_URL_HOST_NAME
     * });
     * const controller = new Botkit({
     *      adapter: adapter,
     *      // other options
     * });
     * ```
     *
     * @param options Configuration options
     */
    public constructor(options: TelegramAdapterOptions) {
        super();

        this.options = {
            api_host: 'api.telegram.org/bot',
            ...options
        };

        this.middlewares = {
            spawn: [
                async (bot, next) => {
                    bot.api = await this.getAPI(bot.getConfig('activity'));
                    next();
                }
            ]
        };
    }

    /**
     * Botkit-only: Initialization function called automatically when used with Botkit.
     * Setups the webhook accordingly
     *
     * @param botkit
     */
    public async init(botkit): Promise<any> {
        const url = `${this.options.webhook_url_host_name}${botkit.getConfig('webhook_uri')}`
        debug('Setup webhook for incoming messages from telegram: ', url);

        const telegramAPI = new TelegramAPI(this.options.access_token);

        /**
         * Delete previous webhook before assigning a new one. For now lets assume our bot can only have 1 webhook
         */
        const webHookInfoForIncomingMessage = await telegramAPI.callAPI("getWebhookInfo", "POST")
        debug('GET INFO ON CURRENT WEBHOOK', webHookInfoForIncomingMessage);

        const webHookDeleteForIncomingMessage = await telegramAPI.callAPI("deleteWebhook", "POST")
        debug('DELETE CURRENT WEBHOOK', webHookDeleteForIncomingMessage);

        const webHookSetForIncomingMessage = await telegramAPI.callAPI("setWebhook", "POST", { url })
        debug('SET NEW WEBHOOK', webHookSetForIncomingMessage);
    }

    /**
     * Get a Telegram API client with the correct credentials based on the page identified in the incoming activity.
     * This is used by many internal functions to get access to the Telegram API, and is exposed as `bot.api` on any BotWorker instances passed into Botkit handler functions.
     *
     * ```javascript
     * let api = adapter.getAPI(activity);
     * let res = api.callAPI('getMe', 'GET');
     * ```
     * @param activity An incoming message activity
     */
    public async getAPI(activity: Partial<Activity>): Promise<TelegramAPI> {
        return new TelegramAPI(this.options.access_token);
    }

    /**
     * Converts an Activity object to a Telegram messenger outbound message ready for the API.
     * @see https://core.telegram.org/bots/api#sendmessage
     *
     * @param activity
     */
    private activityToTelegram(activity: any): any {
        const replyKeyboard = _get(activity, 'channelData.replyKeyboard') || _get(activity, 'attachments.replyKeyboard')
        const replyInlineKeyboard = _get(activity, 'channelData.replyInlineKeyboard') || _get(activity, 'attachments.replyInlineKeyboard');
        const parseMode = _get(activity, 'channelData.parseMode')
        const noWebPreview = _get(activity, 'channelData.noWebPreview', false)
        const sender_action = _get(activity, 'channelData.sender_action', '');

        /**
         * Check reply keyboard and inline keyboard length
         * Setting empty [] keyboard prevents previous one time custom keyboard to be removed
         */
        const hasKeyboard = size(replyKeyboard) > 0 || size(replyInlineKeyboard) > 0;

        const message = {
            chat_id: activity.conversation.id,
            text: activity.text,
            parse_mode: parseMode,
            disable_web_page_preview: noWebPreview,
            sender_action,
            // disable_notification: undefined,
            // reply_to_message_id: undefined,
            reply_markup: hasKeyboard ? {
                ...(replyKeyboard ? { keyboard: replyKeyboard } : {}),
                ...(replyInlineKeyboard ? { inline_keyboard: replyInlineKeyboard } : {}),
                resize_keyboard: true,
                one_time_keyboard: true
            } : {
                    remove_keyboard: true
                },
        };

        // TODO: properly map other message meta data depending on received response
        // if (activity.channelData) {
        //     if (activity.channelData.messaging_type) {
        //         message.messaging_type = activity.channelData.messaging_type;
        //     }
        //     if (activity.channelData.tag) {
        //         message.tag = activity.channelData.tag;
        //     }
        //     if (activity.channelData.sticker_id) {
        //         message.message.sticker_id = activity.channelData.sticker_id;
        //     }
        //     if (activity.channelData.attachment) {
        //         message.message.attachment = activity.channelData.attachment;
        //     }
        //     if (activity.channelData.persona_id) {
        //         message.persona_id = activity.channelData.persona_id;
        //     }
        //     if (activity.channelData.notification_type) {
        //         message.notification_type = activity.channelData.notification_type;
        //     }
        //     if (activity.channelData.sender_action) {
        //         message.sender_action = activity.channelData.sender_action;
        //     }
        //     // make sure the quick reply has a type
        //     if (activity.channelData.quick_replies) {
        //         message.message.quick_replies = activity.channelData.quick_replies.map(function (item) {
        //             const quick_reply = Object.assign({}, item);
        //             if (!item.content_type)
        //                 quick_reply.content_type = 'text';
        //             return quick_reply;
        //         });
        //     }
        // }
        debug('OUT TO TELEGRAM > ', message);
        return message;
    }

    /**
     * Standard BotBuilder adapter method to send a message from the bot to the messaging API.
     * [BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#sendactivities).
     * @see https://core.telegram.org/bots/api#available-methods
     *
     * @param context A TurnContext representing the current incoming message and environment.
     * @param activities An array of outgoing activities to be sent back to the messaging API.
     */
    public async sendActivities(context: TurnContext, activities: Partial<Activity>[]): Promise<ResourceResponse[]> {
        const responses = [];
        for (let a = 0; a < activities.length; a++) {
            const activity = activities[a];
            if (activity.type === ActivityTypes.Message) {
                const message = this.activityToTelegram(activity);
                try {
                    const api = await this.getAPI(context.activity);
                    // TODO: Properly use different methods depending on the message type to send
                    
                    if (message.sender_action === 'typing_on') {
                        const res = await api.callAPI('sendChatAction', 'POST', { chat_id: message.chat_id, action: "typing" });
                        debug('RESPONSE FROM TELEGRAM > ', res);
                    } else {
                        const res = await api.callAPI('sendMessage', 'POST', message);
                        if (res) {
                            responses.push({ id: res.message_id });
                        }
                        debug('RESPONSE FROM TELEGRAM > ', res);
                    }
                } catch (err) {
                    console.error('Error sending activity to Telegram:', err);
                }
            } else {
                // If there are ever any non-message type events that need to be sent, do it here.
                debug('Unknown message type encountered in sendActivities: ', activity.type);
            }
        }

        return responses;
    }

    /**
     * Telegram adapter does not yet support updateActivity.
     * @ignore
     */
    // eslint-disable-next-line
    public async updateActivity(context: TurnContext, activity: Partial<Activity>): Promise<void> {
        debug('Telegram adapter does not yet support updateActivity.');
    }

    /**
     * Telegram adapter does not yet support updateActivity.
     * @ignore
     */
    // eslint-disable-next-line
    public async deleteActivity(context: TurnContext, reference: Partial<ConversationReference>): Promise<void> {
        debug('Telegram adapter does not yet support deleteActivity.');
    }

    /**
     * Standard BotBuilder adapter method for continuing an existing conversation based on a conversation reference.
     * [BotBuilder reference docs](https://docs.microsoft.com/en-us/javascript/api/botbuilder-core/botadapter?view=botbuilder-ts-latest#continueconversation)
     * @param reference A conversation reference to be applied to future messages.
     * @param logic A bot logic function that will perform continuing action in the form `async(context) => { ... }`
     */
    public async continueConversation(reference: Partial<ConversationReference>, logic: (context: TurnContext) => Promise<void>): Promise<void> {
        const request = TurnContext.applyConversationReference(
            { type: 'event', name: 'continueConversation' },
            reference,
            true
        );
        const context = new TurnContext(this, request);

        return this.runMiddleware(context, logic);
    }

    /**
     * Accept an incoming webhook request and convert it into a TurnContext which can be processed by the bot's logic.
     * @see https://core.telegram.org/bots/api#getting-updates
     *
     * @param req A request object from Restify or Express
     * @param res A response object from Restify or Express
     * @param logic A bot logic function in the form `async(context) => { ... }`
     */
    public async processActivity(req, res, logic: (context: TurnContext) => Promise<void>): Promise<void> {
        debug('IN FROM TELEGRAM >', req.body);
        const event = req.body;

        // TODO: Also support other update types
        if (event.message && event.message.message_id) {
            this.processSingleMessage(event, logic);
        }

        if (event.callback_query && event.callback_query.message && event.callback_query.message.message_id) {
            /**
             * Inline Keyboard query, update to normal message format
             * Get message object from event.callback_query.message
             * 
             * text: event.callback_query.data - holds callback_data values
             * from: event.callback_query.from - holds user's from object, 
             *       event.callback_query.message.from - do not use this, it holds bot's values as from object
             */
            const message = {
                ...event.callback_query.message,
                text: event.callback_query.data,
                from: event.callback_query.from
            };

            this.processSingleMessage({ update_id: event.update_id, message }, logic);

            try {
                /**
                 * Remove inline keyboard after callback is sent
                 *
                 * TODO: determined one_time_keyboard 
                 * Find a way to check if keyboard is used only once
                 * Telegram strips invalid property thus making reply_markup to only have inline_keyboard
                 * property and properties like one_time_keyboard are removed, for this use case 
                 * it is enough to just remove inline keyboard after use
                 */
                const telegramAPI = await this.getAPI(message);
                await telegramAPI.callAPI('editMessageText', 'POST', {
                    message_id: message.message_id,
                    chat_id: message.chat.id,
                    text: event.callback_query.message.text,
                    reply_markup: {
                        inline_keyboard: [],
                    }
                });
            } catch (err) {
                console.error('Error trying to editMessageText', err);
            }
        }

        res.status(200);
        res.end();
    }

    /**
     * Handles each individual message inside a webhook payload (webhook may deliver more than one message at a time)
     *
     * @param message
     * @param logic
     */
    private async processSingleMessage(message: any, logic: any): Promise<void> {
        if (!message.message.from) {
            // @see https://core.telegram.org/bots/api#message
            debug('empty for messages sent to channels', message)
        }

        const activity: Activity = {
            channelId: 'telegram',
            timestamp: new Date(),
            // @ts-ignore ignore optional fields
            conversation: {
                id: message.message.chat.id
            },
            from: {
                id: message.message.from.id,
                name: message.message.from.username,
            },
            recipient: {
                id: message.message.from.id,
                name: message.message.from.username,
            },
            channelData: message.message,
            type: ActivityTypes.Event,
            text: null
        };

        if (message.message && message.message.photo) {
            // message.message.photo is an array of objects with increasing image size. We only need to take the image with the highest resolution.
            const highestResolutionImage = _last(message.message.photo)
            const telegramAPI = await this.getAPI(message);

            const getFileResult = await telegramAPI.callAPI('getFile', 'POST', {
                file_id: highestResolutionImage.file_id
            });

            const rawFileResult = await telegramAPI.callAPI(getFileResult.result.file_path, 'GET', {}, "file/bot");

            activity.channelData.photo = {
                ...getFileResult.result,
                data: Buffer.from(rawFileResult),
            };
        }

        if (message.message) {
            activity.type = ActivityTypes.Message;
            activity.text = message.message.text;

            // TODO: Also support other message types such as images

            if (message.message.contact) {
                activity.channelData.contact = message.message.contact;
            }

            if (message.message.location) {
                activity.channelData.location = message.message.location;
            }

            // if (activity.channelData.message.is_echo) {
            //     activity.type = ActivityTypes.Event;
            // }

            // copy fields like attachments, sticker, quick_reply, nlp, etc.
            // for (const key in message.message) {
            //     activity.channelData[key] = message.message[key];
            // }
        }

        const context = new TurnContext(this, activity as Activity);
        await this.runMiddleware(context, logic);
    }
}

/**
 * This interface defines the options that can be passed into the TelegramAdapter constructor function.
 */
export interface TelegramAdapterOptions {
    /**
     * Alternate root url used to construct calls to Telegram's API. Can be changed (for mocking, proxy, etc).
     */
    api_host?: string;

    /**
     * Needed to be able to control the bot
     */
    access_token: string;

    /**
     * Needs to be publicly accessible so telegram can send message responses on it
     */
    webhook_url_host_name: string;
}
