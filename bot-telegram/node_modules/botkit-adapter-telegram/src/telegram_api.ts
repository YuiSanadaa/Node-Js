/**
 * @module botkit-adapter-telegram
 */
/**
 * Copyright (c) Dynameyes. All rights reserved.
 * Licensed under the MIT License.
 */

import * as request from 'request';

/**
 * A simple API client for the Telegram API.
 * It can be used to call any API provided by Telegram.
 *
 */
export class TelegramAPI {
    private access_token: string
    private api_host: string

    /**
     * Create a TelegramAPI client.
     * ```
     * let api = new TelegramAPI(TOKEN);
     * await api.callAPI('getMe','POST', {some_options});
     * ```
     *
     * @see https://core.telegram.org/bots/api
     * FORMAT: https://api.telegram.org/bot<access_token>/<method_name>
     *
     * @param access_token
     * @param api_host
     */
    public constructor(access_token: string, api_host = 'api.telegram.org') {
        if (!access_token) {
            throw new Error('Access token is required!');
        }
        this.access_token = access_token;
        this.api_host = api_host;
    }

    /**
     * Call one of the Telegram APIs
     *
     * @see https://core.telegram.org/bots/api
     * FORMAT: https://api.telegram.org/bot<access_token>/<telegram_method_name>
     *
     * @param telegram_method_name Path to the API endpoint, for example `/getMe`. See: https://core.telegram.org/bots/api#available-methods
     * @param method HTTP method, for example POST, GET, DELETE or PUT.
     * @param payload An object to be sent as parameters to the API call.
     * @param entryPath entry path to used when doing the api call.
     */
    public async callAPI(telegram_method_name: string, method = 'POST', payload: any = {}, entryPath = 'bot'): Promise<any> {
        let queryString = '?';
        let body = {};

        if (method.toUpperCase() === 'GET') {
            for (const key in payload) {
                queryString = queryString + `${ encodeURIComponent(key) }=${ encodeURIComponent(payload[key]) }&`;
            }
        } else {
            body = payload;
        }

        return new Promise((resolve, reject) => {
            request({
                method: method.toUpperCase(),
                json: true,
                body,
                encoding: null,
                uri: `https://${ this.api_host }/${entryPath}${ this.access_token }/${ telegram_method_name }${ queryString }`
            }, (err, res, body) => {
                if (err) {
                    reject(err);
                } else if (body.error) {
                    reject(body.error.message);
                } else {
                    resolve(body);
                }
            });
        });
    }
}
